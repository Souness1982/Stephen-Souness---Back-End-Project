const { TestWatcher } = require("jest");
const app = require("../app");

app.use(express.json());
// for patch/post requests

app.js;

app.get("/api/reviews/:review_id/comments", getReviewIdComments);

constolller.js;

exports.getReviewIdComments = (req, res, next) => {
  const { review_id } = req.params;
  selectReviewIdComments(review_id)
    .then((comments) => {
      res.status(200).send({ comments });
    })
    .catch((err) => {
      next(err);
    });
};

models.js;

exports.selectReviewIdComments = (review_id) => {
  return db
    .query(
      `SELECT comment_id, votes, created_at, author, body, review_id FROM comments WHERE review_id = $1;`,
      [review_id]
    )
    .then((res) => {
      if (res.rows.length === 0) {
        return Promise.reject({ status: 404, msg: "review ID not found" });
      }
      return res.rows;
    });
};

test.app.js;
describe("/api/reviews/:review_id/comments", () => {
  test("GET - 200, responds with array of comments for given review_id", () => {
    const reviewId = 3;
    return request(app)
      .get(`/api/reviews/${reviewId}/comments`)
      .expect(200)
      .then(({ body }) => {
        expect(body.comments).toHaveLength(3);
        body.comments.forEach((comment) => {
          expect(comment).toMatchObject({
            comment_id: expect.any(Number),
            votes: expect.any(Number),
            created_at: expect.any(String),
            author: expect.any(String),
            body: expect.any(String),
            review_id: expect.any(Number),
          });
        });
      });
  });
  test("GET - 404 - non existent review_id", () => {
    const reviewId = 655;
    return request(app)
      .get(`/api/reviews/${reviewId}/comments`)
      .expect(404)
      .then(({ body }) => {
        expect(body.msg).toBe("review ID not found");
      });
  });

  test("GET - 404 Invalid path", () => {
    const reviewId = 2;
    return request(app)
      .get(`/api/previews/${reviewId}/comments`)
      .expect(404)
      .then((res) => {
        expect((res) => {
          expect(res.body.msg).toBe("Invalid path");
        });
      });
  });
});
